# -*- coding: utf-8 -*-
"""Contoh Dasboard Kapal .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HHLIQ98KHit4gQcvzUpSbor20-LfzC7G
"""

import pandas as pd
import streamlit as st
import plotly.express as px
from datetime import datetime, timedelta

st.set_page_config(page_title="Monitoring Kapal 6 Jam", layout="wide")

import pandas as pd
import random
from datetime import datetime, timedelta

# Setup
random.seed(42)
kapal_names = ["KM Nusantara", "KM Laut Jaya", "KM Samudra", "KM Pelita", "KM Bintang",
               "KM Armada", "KM Jayabaya", "KM Pelangi", "KM Surya", "KM Baruna"]
jenis_kapal = ["Kapal Penumpang", "Kapal Curah Kering", "Kapal Curah Cair", "Kapal Kontainer"]
terminals = ["Terminal 1", "Terminal 2", "Terminal 3"]

data = []
start_date = datetime(2025, 7, 18, 0, 0)

for _ in range(100):
    nama = random.choice(kapal_names)
    jenis = random.choice(jenis_kapal)
    tanggal = start_date + timedelta(hours=random.randint(0, 120), minutes=random.randint(0, 59))
    durasi = round(random.uniform(2, 12), 1)
    terminal = random.choice(terminals)
    data.append([nama, jenis, tanggal.strftime("%Y-%m-%d %H:%M:%S"), durasi, terminal])

df_dummy = pd.DataFrame(data, columns=[
    "Nama Kapal", "Jenis Kapal", "Tanggal Kedatangan", "Durasi Sandar (jam)", "Terminal"
])
df_dummy.to_csv("dummy_kapal_data_100.csv", index=False)



import streamlit as st

import streamlit as st
import random

import streamlit as st
import random

# Fungsi untuk generate captcha
def generate_captcha():
    characters = ['A', 'B', '3', 'X', '9', 'Z', 'z']
    return ' '.join(random.sample(characters, 5))

# Setup session state
if 'captcha' not in st.session_state:
    st.session_state.captcha = generate_captcha()
if 'login' not in st.session_state:
    st.session_state.login = False

# CSS Styling
st.markdown("""
    <style>
    .container {
        display: flex;
        flex-direction: row;
        height: 100vh;
        font-family: 'Arial', sans-serif;
    }
    .left-panel {
        flex: 1;
        background-color: #0b2447;
        color: white;
        padding: 5% 8%;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    .left-panel h1 {
        font-size: 3em;
        font-weight: bold;
        margin-bottom: 0.2em;
    }
    .left-panel h2 {
        font-size: 1.5em;
        margin-bottom: 1em;
        letter-spacing: 1px;
    }
    .left-panel p {
        font-size: 1.1em;
        line-height: 1.5;
    }
    .right-panel {
        flex: 1;
        background-color: #f9fcff;
        padding: 5% 8%;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    .captcha-box {
        background-color: #f6e8cd;
        padding: 10px 20px;
        border-radius: 8px;
        display: inline-block;
        font-weight: bold;
        font-size: 1.2em;
        margin-bottom: 10px;
    }
    input {
        margin-bottom: 10px;
    }
    .bottom-links {
        margin-top: 15px;
        font-size: 0.9em;
    }
    .bottom-links a {
        color: #004aad;
        text-decoration: none;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

# Layout Container
st.markdown('<div class="container">', unsafe_allow_html=True)

# Kiri
st.markdown('''
    <div class="left-panel">
        <h1>SMARTSHIP</h1>
        <h2>EVALUASI KAPAL</h2>
        <p>Selamat datang di platform evaluasi armada kapal secara digital yang memberikan informasi akurat dan terkini untuk performa kapal Anda.</p>
    </div>
''', unsafe_allow_html=True)

# Kanan
with st.container():
    st.markdown('<div class="right-panel">', unsafe_allow_html=True)
    st.markdown('<h2 style="color:#0b2447;">Login to Dashboard</h2>', unsafe_allow_html=True)
    
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    
    st.markdown(f'<div class="captcha-box">{st.session_state.captcha}</div>', unsafe_allow_html=True)
    captcha_input = st.text_input("Captcha")

    if st.button("Sign In"):
        if captcha_input == st.session_state.captcha:
            st.success(f"Selamat datang, {username}!")
            st.session_state.login = True
        else:
            st.error("Captcha salah. Silakan coba lagi.")
            st.session_state.captcha = generate_captcha()

    st.markdown('''
        <div class="bottom-links">
            Don‚Äôt have an account? <a href="#">Sign Up Here</a><br>
            Forgot Password? <a href="#">Click Here</a>
        </div>
    </div>
    ''', unsafe_allow_html=True)

# Tutup container
st.markdown('</div>', unsafe_allow_html=True)


# Setelah login berhasil
st.success("‚úÖ Berhasil login! Selamat datang di SmartShip Dashboard.")
st.markdown("üìä Di sini akan muncul dashboard utama...")


# Contoh konten dashboard
st.header("Dashboard Utama")
st.write("Analisis Performa Kapal Anda.")

col1, col2, col3 = st.columns(3)
col1.metric("Total Armada", "12 Kapal", "2")
col2.metric("Efisiensi Bahan Bakar", "85%", "-1.2%")
col3.metric("Kepatuhan Rute", "98%", "0.5%")
# ------------------ DASHBOARD ------------------
st.sidebar.success("Login berhasil!")
st.sidebar.title("Navigasi")
page = st.sidebar.radio("Pilih Halaman:", ["Beranda", "Monitoring", "Statistik", "Tentang"])

if page == "Beranda":
    st.image("https://yourimageurl.com/banner.png", use_column_width=True)
    st.markdown("### üëã Selamat Datang di Dashboard Monitoring Barang Kapal")
    col1, col2, col3 = st.columns(3)
    col1.metric("Kapal Hari Ini", "17")
    col2.metric("Terminal Aktif", "Terminal 2")
    col3.metric("Update Terakhir", "14:47 WIB")
    
# ---------- BACA DATA ----------
@st.cache_data
def load_data():
    df = pd.read_csv('dummy_kapal_data_100.csv', parse_dates=["Tanggal Kedatangan"])
    return df

df = load_data()

# ---------- FILTER 6 JAM TERAKHIR ----------
now = datetime.now()
six_hours_ago = now - timedelta(hours=6)
df_filtered = df[(df["Tanggal Kedatangan"] >= six_hours_ago) & (df["Tanggal Kedatangan"] <= now)]

st.title("üö¢ Dashboard Monitoring Kapal - Update Tiap 6 Jam")
st.subheader(f"Periode: {six_hours_ago.strftime('%H:%M')} - {now.strftime('%H:%M')} WIB, {now.strftime('%d %B %Y')}")
st.markdown(f"‚è±Ô∏è <b>Update berikutnya:</b> { (now + timedelta(hours=6)).strftime('%H:%M WIB') }", unsafe_allow_html=True)

# ---------- RINGKASAN ----------
col1, col2, col3, col4 = st.columns(4)

# Total Kapal Masuk
col1.metric("Total Kapal Masuk", len(df_filtered))

# Jenis Kapal Terbanyak
if not df_filtered['Jenis Kapal'].mode().empty:
    kapal_terbanyak = df_filtered['Jenis Kapal'].mode().values[0]
else:
    kapal_terbanyak = "Tidak ada data"
col2.metric("Jenis Terbanyak", kapal_terbanyak)

# Rata-rata Durasi Sandar
if not df_filtered.empty:
    rata_sandar = f"{df_filtered['Durasi Sandar (jam)'].mean():.1f} jam"
else:
    rata_sandar = "Tidak ada data"
col3.metric("Rata-rata Sandar", rata_sandar)

# Terminal Paling Aktif
if not df_filtered['Terminal'].mode().empty:
    terminal_aktif = df_filtered['Terminal'].mode().values[0]
else:
    terminal_aktif = "Tidak ada data"
col4.metric("Terminal Paling Aktif", terminal_aktif)

kapal_count = df_filtered['Jenis Kapal'].value_counts().reset_index()
kapal_count.columns = ['Jenis Kapal', 'Jumlah']

fig1 = px.bar(kapal_count,
              x='Jenis Kapal', y='Jumlah',
              labels={'Jenis Kapal': 'Jenis Kapal', 'Jumlah': 'Jumlah Kapal'},
              color='Jenis Kapal',
              text='Jumlah')
st.plotly_chart(fig1, use_container_width=True)

# ---------- GRAFIK JUMLAH PER JAM ----------
st.markdown("### üìà Jumlah Kapal Masuk per Jam")
df_filtered['jam'] = df_filtered["Tanggal Kedatangan"].dt.strftime('%H:00')
fig2 = px.line(df_filtered.groupby('jam').size().reset_index(name='jumlah'),
               x='jam', y='jumlah', markers=True)
st.plotly_chart(fig2, use_container_width=True)

# Pastikan kolom ada
required_columns = ['timestamp', 'nama_kapal', 'jenis_kapal', 'status', 'terminal', 'durasi_sandar_jam']
missing_columns = [col for col in required_columns if col not in df_filtered.columns]

if missing_columns:
    st.error(f"‚ùå Kolom berikut tidak ditemukan di DataFrame: {missing_columns}")
else:
    st.markdown("### üìã Tabel Kedatangan Kapal")
    st.dataframe(df_filtered[required_columns])

# ---------- INSIGHT OTOMATIS ----------
st.markdown("### üí° Insight Otomatis")
with st.expander("Lihat Insight"):
    st.write(f"- Kapal dengan jenis terbanyak: **{kapal_terbanyak}**")
    st.write(f"- Terminal tersibuk: **{terminal_aktif}**")
    st.write(f"- Rata-rata durasi sandar: **{df_filtered['Durasi Sandar (jam)'].mean():.2f} jam**")
    max_kapal = df_filtered.groupby('jam').size().idxmax()
    st.write(f"- Jam paling sibuk: **{max_kapal}**")

st.markdown("‚ö†Ô∏è Refresh otomatis bisa diatur dengan Streamlit Cloud Scheduler atau crontab di backend.")
