# -*- coding: utf-8 -*-
"""Contoh Dasboard Kapal .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HHLIQ98KHit4gQcvzUpSbor20-LfzC7G
"""

import pandas as pd
import streamlit as st
import plotly.express as px
from datetime import datetime, timedelta

st.set_page_config(page_title="Monitoring Kapal 6 Jam", layout="wide")

import pandas as pd
import random
from datetime import datetime, timedelta

# Setup
random.seed(42)
kapal_names = ["KM Nusantara", "KM Laut Jaya", "KM Samudra", "KM Pelita", "KM Bintang",
               "KM Armada", "KM Jayabaya", "KM Pelangi", "KM Surya", "KM Baruna"]
jenis_kapal = ["Kapal Penumpang", "Kapal Curah Kering", "Kapal Curah Cair", "Kapal Kontainer"]
terminals = ["Terminal 1", "Terminal 2", "Terminal 3"]

data = []
start_date = datetime(2025, 7, 18, 0, 0)

for _ in range(100):
    nama = random.choice(kapal_names)
    jenis = random.choice(jenis_kapal)
    tanggal = start_date + timedelta(hours=random.randint(0, 120), minutes=random.randint(0, 59))
    durasi = round(random.uniform(2, 12), 1)
    terminal = random.choice(terminals)
    data.append([nama, jenis, tanggal.strftime("%Y-%m-%d %H:%M:%S"), durasi, terminal])

df_dummy = pd.DataFrame(data, columns=[
    "Nama Kapal", "Jenis Kapal", "Tanggal Kedatangan", "Durasi Sandar (jam)", "Terminal"
])
df_dummy.to_csv("dummy_kapal_data_100.csv", index=False)

# ---------- BACA DATA ----------
@st.cache_data
def load_data():
    df = pd.read_csv('dummy_kapal_data_100.csv', parse_dates=["Tanggal Kedatangan"])
    return df

df = load_data()

# ---------- FILTER 6 JAM TERAKHIR ----------
now = datetime.now()
six_hours_ago = now - timedelta(hours=6)
df_filtered = df[(df["Tanggal Kedatangan"] >= six_hours_ago) & (df["Tanggal Kedatangan"] <= now)]

st.title("🚢 Dashboard Monitoring Kapal - Update Tiap 6 Jam")
st.subheader(f"Periode: {six_hours_ago.strftime('%H:%M')} - {now.strftime('%H:%M')} WIB, {now.strftime('%d %B %Y')}")
st.markdown(f"⏱️ <b>Update berikutnya:</b> { (now + timedelta(hours=6)).strftime('%H:%M WIB') }", unsafe_allow_html=True)

# ---------- RINGKASAN ----------
col1, col2, col3, col4 = st.columns(4)

# Total Kapal Masuk
col1.metric("Total Kapal Masuk", len(df_filtered))

# Jenis Kapal Terbanyak
if not df_filtered['Jenis Kapal'].mode().empty:
    kapal_terbanyak = df_filtered['Jenis Kapal'].mode().values[0]
else:
    kapal_terbanyak = "Tidak ada data"
col2.metric("Jenis Terbanyak", kapal_terbanyak)

# Rata-rata Durasi Sandar
if not df_filtered.empty:
    rata_sandar = f"{df_filtered['Durasi Sandar (jam)'].mean():.1f} jam"
else:
    rata_sandar = "Tidak ada data"
col3.metric("Rata-rata Sandar", rata_sandar)

# Terminal Paling Aktif
if not df_filtered['Terminal'].mode().empty:
    terminal_aktif = df_filtered['Terminal'].mode().values[0]
else:
    terminal_aktif = "Tidak ada data"
col4.metric("Terminal Paling Aktif", terminal_aktif)

kapal_count = df_filtered['Jenis Kapal'].value_counts().reset_index()
kapal_count.columns = ['Jenis Kapal', 'Jumlah']

fig1 = px.bar(kapal_count,
              x='Jenis Kapal', y='Jumlah',
              labels={'Jenis Kapal': 'Jenis Kapal', 'Jumlah': 'Jumlah Kapal'},
              color='Jenis Kapal',
              text='Jumlah')
st.plotly_chart(fig1, use_container_width=True)

# ---------- GRAFIK JUMLAH PER JAM ----------
st.markdown("### 📈 Jumlah Kapal Masuk per Jam")
df_filtered['jam'] = df_filtered["Tanggal Kedatangan"].dt.strftime('%H:00')
fig2 = px.line(df_filtered.groupby('jam').size().reset_index(name='jumlah'),
               x='jam', y='jumlah', markers=True)
st.plotly_chart(fig2, use_container_width=True)

# Pastikan kolom ada
required_columns = ['timestamp', 'nama_kapal', 'jenis_kapal', 'status', 'terminal', 'durasi_sandar_jam']
missing_columns = [col for col in required_columns if col not in df_filtered.columns]

if missing_columns:
    st.error(f"❌ Kolom berikut tidak ditemukan di DataFrame: {missing_columns}")
else:
    st.markdown("### 📋 Tabel Kedatangan Kapal")
    st.dataframe(df_filtered[required_columns])

# ---------- INSIGHT OTOMATIS ----------
st.markdown("### 💡 Insight Otomatis")
with st.expander("Lihat Insight"):
    st.write(f"- Kapal dengan jenis terbanyak: **{kapal_terbanyak}**")
    st.write(f"- Terminal tersibuk: **{terminal_aktif}**")
    st.write(f"- Rata-rata durasi sandar: **{df_filtered['Durasi Sandar (jam)'].mean():.2f} jam**")
    max_kapal = df_filtered.groupby('jam').size().idxmax()
    st.write(f"- Jam paling sibuk: **{max_kapal}**")

st.markdown("⚠️ Refresh otomatis bisa diatur dengan Streamlit Cloud Scheduler atau crontab di backend.")